// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebReactApp.Server.Data;

#nullable disable

namespace WebReactApp.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240912121605_v00006")]
    partial class v00006
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency_Cash")
                        .HasColumnType("int");

                    b.Property<int>("Currency_Point")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("Email");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountConfirmTicket", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountConfirmTickets");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountPostID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ItemMetaName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("AccountPostID");

                    b.ToTable("AccountItems");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountItemParameters", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountItemID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("NumberValue")
                        .HasColumnType("int");

                    b.Property<string>("ParamName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("AccountItemID");

                    b.ToTable("AccountItemsParameters");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountPost", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnclosureTaken")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountPosts");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.LoginMethod.UsernamePasswordMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("PasswordItr")
                        .HasColumnType("int");

                    b.Property<int>("PasswordMethod")
                        .HasColumnType("int");

                    b.Property<int>("PasswordPrf")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("PasswordSaltLength")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UsernamePasswordMethods");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountConfirmTicket", b =>
                {
                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountItem", b =>
                {
                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.Account", "Account")
                        .WithMany("AccountItems")
                        .HasForeignKey("AccountID");

                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.AccountPost", null)
                        .WithMany("Enclosures")
                        .HasForeignKey("AccountPostID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountItemParameters", b =>
                {
                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.AccountItem", "AccountItem")
                        .WithMany("Parameters")
                        .HasForeignKey("AccountItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountItem");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountPost", b =>
                {
                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.Account", "Account")
                        .WithMany("AccountPosts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountRole", b =>
                {
                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.Account", null)
                        .WithMany("Roles")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.LoginMethod.UsernamePasswordMethod", b =>
                {
                    b.HasOne("WebReactApp.Server.ModelObjects.Identity.Account", "Account")
                        .WithOne("UsernamePasswordMethod")
                        .HasForeignKey("WebReactApp.Server.ModelObjects.Identity.LoginMethod.UsernamePasswordMethod", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.Account", b =>
                {
                    b.Navigation("AccountItems");

                    b.Navigation("AccountPosts");

                    b.Navigation("Roles");

                    b.Navigation("UsernamePasswordMethod")
                        .IsRequired();
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountItem", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("WebReactApp.Server.ModelObjects.Identity.AccountPost", b =>
                {
                    b.Navigation("Enclosures");
                });
#pragma warning restore 612, 618
        }
    }
}
